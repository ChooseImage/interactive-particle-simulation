import * as THREE from "three";
import { OrbitControls } from "three/addons/controls/OrbitControls.js";

// Three JS
window.addEventListener("load", init, false);
window.addEventListener("resize", onWindowResize, false);

function init() {
  console.log("Init Functions");
  createWorld();
}

var scene, camera, renderer, container;
var _width, _height;

function createWorld() {
  _width = window.innerWidth;
  _height = window.innerHeight;
  //---
  scene = new THREE.Scene();
  //---
  camera = new THREE.PerspectiveCamera(75, _width / _height, 0.1, 1000);
  camera.position.z = 1; // Adjusted to fit the full screen mesh
  //---
  renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(_width, _height);
  document.body.style.margin = 0; // Remove margin
  //document.body.style.overflow = 'hidden'; // Prevent scrolling
  document.body.appendChild(renderer.domElement);
  //---
  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;
  controls.enableZoom = false; // Disable scroll zoom

  const vertexShader = `
    varying vec2 vUv;
    void main() {
      vUv = uv;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
  `;

  const material = new THREE.ShaderMaterial({
    vertexShader: vertexShader,
    fragmentShader: fragmentShader,
    uniforms: {
      scaleFactor: { value: 0.3 },
      distance: { value: 0.8 },
      iTime: { value: 0.0 },
      iResolution: { value: new THREE.Vector2(_width, _height) }
    }
  });

  const geometry = new THREE.PlaneGeometry(2, 2);
  const mesh = new THREE.Mesh(geometry, material);
  scene.add(mesh);
  //---
  animate();
}

function onWindowResize() {
  _width = window.innerWidth;
  _height = window.innerHeight;
  renderer.setSize(_width, _height);
  camera.aspect = _width / _height;
  camera.updateProjectionMatrix();
}

function animate() {
  requestAnimationFrame(animate);
  renderer.render(scene, camera);
  
  const material = scene.children.find(child => child.material && child.material.uniforms);
  if (material) {
    material.material.uniforms.iTime.value += 0.05;
    
    // Calculate scroll position
    const scrollY = window.scrollY;
    const maxScroll = document.body.scrollHeight - window.innerHeight;
    const scrollFactor = scrollY / maxScroll;

    // Update distance uniform to move shapes towards the center
    material.material.uniforms.distance.value = 0.8 - scrollFactor * 0.8;
  }
}

// Fragment shader converted from Shadertoy
const fragmentShader = `
  uniform float scaleFactor;
  uniform float iTime;
  uniform float distance;
  uniform vec2 iResolution;
  varying vec2 vUv;

  // First shape (original)
  const vec3 positions1[94] = vec3[94](vec3(-0.9992239870002471, 0.43430438390524984, 0.0), vec3(-0.9931282989501953, 0.49443810847638603, 0.0), vec3(-0.9812242080504636, 0.55266051639419, 0.0), vec3(-0.9638114901623094, 0.6086718317974045, 0.0), vec3(-0.9411899211469903, 0.6621722788247717, 0.0), vec3(-0.9136592768657639, 0.7128620816150344, 0.0), vec3(-0.8815193331798875, 0.7604414643069347, 0.0), vec3(-0.8450698659506188, 0.8046106510392154, 0.0), vec3(-0.8046106510392154, 0.8450698659506188, 0.0), vec3(-0.7604414643069347, 0.8815193331798875, 0.0), vec3(-0.7128620816150344, 0.9136592768657639, 0.0), vec3(-0.6621722788247717, 0.9411899211469903, 0.0), vec3(-0.6086718317974045, 0.9638114901623094, 0.0), vec3(-0.55266051639419, 0.9812242080504636, 0.0), vec3(-0.49443810847638603, 0.9931282989501953, 0.0), vec3(-0.43430438390524984, 0.9992239870002471, 0.0), vec3(-0.3995879759271461, 1.0, 0.0), vec3(-0.36891817759318524, 1.0, 0.0), vec3(-0.3115193930016943, 1.0, 0.0), vec3(-0.23150377388460086, 1.0, 0.0), vec3(-0.13298347197383287, 1.0, 0.0), vec3(-0.02007063900131778, 1.0, 0.0), vec3(0.16728927428463858, 1.0, 0.0), vec3(0.4290962678840362, 1.0, 0.0), vec3(0.6164561811699925, 1.0, 0.0), vec3(0.7293690141425075, 1.0, 0.0), vec3(0.8278893160532756, 1.0, 0.0), vec3(0.907904935170369, 1.0, 0.0), vec3(0.9653037197618599, 1.0, 0.0), vec3(0.9959735180958207, 1.0, 0.0), vec3(1.0, 0.9959735180958208, 0.0), vec3(1.0, 0.9653037197618599, 0.0), vec3(1.0, 0.907904935170369, 0.0), vec3(1.0, 0.8278893160532756, 0.0), vec3(1.0, 0.7293690141425075, 0.0), vec3(1.0, 0.6164561811699925, 0.0), vec3(1.0, 0.4290962678840361, 0.0), vec3(1.0, 0.16728927428463858, 0.0), vec3(1.0, -0.02007063900131767, 0.0), vec3(1.0, -0.13298347197383276, 0.0), vec3(1.0, -0.23150377388460086, 0.0), vec3(1.0, -0.3115193930016942, 0.0), vec3(1.0, -0.36891817759318535, 0.0), vec3(1.0, -0.3995879759271461, 0.0), vec3(0.9992239835808077, -0.43430427790262605, 0.0), vec3(0.9931282701607211, -0.49443783017813425, 0.0), vec3(0.9812241335949263, -0.5526601143342904, 0.0), vec3(0.9638113550392979, -0.6086713492152203, 0.0), vec3(0.9411897156497078, -0.6621717536650509, 0.0), vec3(0.913658996582031, -0.7128615465279082, 0.0), vec3(0.8815189789921398, -0.7604409466479196, 0.0), vec3(0.8450694440359088, -0.804610172869211, 0.0), vec3(0.804610172869211, -0.8450694440359088, 0.0), vec3(0.7604409466479196, -0.8815189789921398, 0.0), vec3(0.7128615465279082, -0.913658996582031, 0.0), vec3(0.6621717536650509, -0.9411897156497078, 0.0), vec3(0.6086713492152203, -0.9638113550392979, 0.0), vec3(0.5526601143342904, -0.9812241335949263, 0.0), vec3(0.49443783017813425, -0.9931282701607211, 0.0), vec3(0.43430427790262605, -0.9992239835808077, 0.0), vec3(0.3995879759271461, -1.0, 0.0), vec3(0.36891817759318535, -1.0, 0.0), vec3(0.3115193930016942, -1.0, 0.0), vec3(0.23150377388460086, -1.0, 0.0), vec3(0.13298347197383276, -1.0, 0.0), vec3(0.02007063900131767, -1.0, 0.0), vec3(-0.16728927428463858, -1.0, 0.0), vec3(-0.4290962678840361, -1.0, 0.0), vec3(-0.6164561811699925, -1.0, 0.0), vec3(-0.7293690141425075, -1.0, 0.0), vec3(-0.8278893160532756, -1.0, 0.0), vec3(-0.907904935170369, -1.0, 0.0), vec3(-0.9653037197618599, -1.0, 0.0), vec3(-0.9959735180958208, -1.0, 0.0), vec3(-1.0, -0.9959735180958207, 0.0), vec3(-1.0, -0.9653037197618599, 0.0), vec3(-1.0, -0.907904935170369, 0.0), vec3(-1.0, -0.8278893160532756, 0.0), vec3(-1.0, -0.7293690141425075, 0.0), vec3(-1.0, -0.6164561811699925, 0.0), vec3(-1.0, -0.4290962678840362, 0.0), vec3(-1.0, -0.16728927428463858, 0.0), vec3(-1.0, 0.02007063900131778, 0.0), vec3(-1.0, 0.13298347197383287, 0.0), vec3(-1.0, 0.23150377388460086, 0.0), vec3(-1.0, 0.3115193930016943, 0.0), vec3(-1.0, 0.36891817759318524, 0.0), vec3(-1.0, 0.3995879759271461, 0.0), vec3(-1.0, -1.0, 0.0), vec3(-1.0, 0.4036144578313253, 0.0), vec3(-0.4036144578313253, 1.0, 0.0), vec3(0.4036144578313252, -1.0, 0.0), vec3(1.0, -0.4036144578313252, 0.0), vec3(1.0, 1.0, 0.0));
  const ivec3 triangles1[92] = ivec3[92](ivec3(0, 1, 5), ivec3(0, 5, 6), ivec3(0, 6, 7), ivec3(0, 7, 89), ivec3(1, 2, 4), ivec3(1, 4, 5), ivec3(2, 3, 4), ivec3(7, 8, 90), ivec3(7, 90, 89), ivec3(8, 9, 15), ivec3(8, 15, 90), ivec3(9, 10, 15), ivec3(10, 11, 14), ivec3(10, 14, 15), ivec3(11, 12, 13), ivec3(11, 13, 14), ivec3(16, 17, 87), ivec3(16, 87, 89), ivec3(16, 89, 90), ivec3(17, 18, 86), ivec3(17, 86, 87), ivec3(18, 19, 85), ivec3(18, 85, 86), ivec3(19, 20, 84), ivec3(19, 84, 85), ivec3(20, 21, 83), ivec3(20, 83, 84), ivec3(21, 22, 38), ivec3(21, 38, 65), ivec3(21, 65, 82), ivec3(21, 82, 83), ivec3(22, 23, 37), ivec3(22, 37, 38), ivec3(23, 24, 36), ivec3(23, 36, 37), ivec3(24, 25, 35), ivec3(24, 35, 36), ivec3(25, 26, 34), ivec3(25, 34, 35), ivec3(26, 27, 33), ivec3(26, 33, 34), ivec3(27, 28, 32), ivec3(27, 32, 33), ivec3(28, 29, 31), ivec3(28, 31, 32), ivec3(29, 30, 31), ivec3(29, 93, 30), ivec3(38, 39, 64), ivec3(38, 64, 65), ivec3(39, 40, 63), ivec3(39, 63, 64), ivec3(40, 41, 62), ivec3(40, 62, 63), ivec3(41, 42, 61), ivec3(41, 61, 62), ivec3(42, 43, 60), ivec3(42, 60, 61), ivec3(43, 91, 60), ivec3(43, 92, 91), ivec3(44, 45, 49), ivec3(44, 49, 50), ivec3(44, 50, 51), ivec3(44, 51, 92), ivec3(45, 46, 48), ivec3(45, 48, 49), ivec3(46, 47, 48), ivec3(51, 52, 92), ivec3(52, 53, 59), ivec3(52, 59, 91), ivec3(52, 91, 92), ivec3(53, 54, 59), ivec3(54, 55, 58), ivec3(54, 58, 59), ivec3(55, 56, 57), ivec3(55, 57, 58), ivec3(65, 66, 82), ivec3(66, 67, 81), ivec3(66, 81, 82), ivec3(67, 68, 80), ivec3(67, 80, 81), ivec3(68, 69, 79), ivec3(68, 79, 80), ivec3(69, 70, 78), ivec3(69, 78, 79), ivec3(70, 71, 77), ivec3(70, 77, 78), ivec3(71, 72, 76), ivec3(71, 76, 77), ivec3(72, 73, 75), ivec3(72, 75, 76), ivec3(73, 74, 75), ivec3(73, 88, 74));

  // Triangle shape
  const vec3 positions2[107] = vec3[107](vec3(-0.4633814593905352, 0.9609993831411616, 0), vec3(-0.45650038810589094, 0.9569903099589022, 0), vec3(-0.43421573271909814, 0.9440067481570567, 0), vec3(-0.3845088026844707, 0.9150463273256407, 0), vec3(-0.3152158584272439, 0.8746746361964729, 0), vec3(-0.2298979934424358, 0.8249664511873263, 0), vec3(-0.1321163012250642, 0.7679965487159737, 0), vec3(0.030136021141697004, 0.6734645481811878, 0), vec3(0.2568589736578481, 0.5413704495829683, 0), vec3(0.4191112960246097, 0.44683844904818226, 0), vec3(0.5168929882419806, 0.3898685465768299, 0), vec3(0.602210853226789, 0.34016036156768314, 0), vec3(0.6715037974840158, 0.2997886704385153, 0), vec3(0.7212107275186432, 0.2708282496070994, 0), vec3(0.743495382905436, 0.25784468780525394, 0), vec3(0.7503764541900804, 0.25383561462299453, 0), vec3(0.7512574538828581, 0.25216668630879424, 0), vec3(0.7512574538828581, 0.24708188230607697, 0), vec3(0.7686005875116385, 0.23504780665671365, 0), vec3(0.7999301192281445, 0.21060943602470028, 0), vec3(0.8267840035565783, 0.18300202717089675, 0), vec3(0.8491622404969402, 0.1527131244371167, 0), vec3(0.8670648300492297, 0.12023027216517446, 0), vec3(0.8804917722134465, 0.08604101469688363, 0), vec3(0.889443066989591, 0.0506328963740581, 0), vec3(0.8939187143776635, 0.014493461538511498, 0), vec3(0.8939187143776635, -0.021889745467941868, 0), vec3(0.889443066989591, -0.05802918030348847, 0), vec3(0.8804917722134465, -0.09343729862631389, 0), vec3(0.8670648300492297, -0.12762655609460483, 0), vec3(0.8491622404969402, -0.1601094083665473, 0), vec3(0.8267840035565783, -0.1903983111003269, 0), vec3(0.7999301192281445, -0.21800571995413032, 0), vec3(0.7686005875116385, -0.2424440905861438, 0), vec3(0.7503764541900804, -0.2538358207353433, 0), vec3(0.743495382905436, -0.2578448996374496, 0), vec3(0.7212107275186432, -0.2708284799632741, 0), vec3(0.6715037974840158, -0.29978894211326157, 0), vec3(0.602210853226789, -0.34016069084175116, 0), vec3(0.5168929882419806, -0.38986894677083406, 0), vec3(0.4191112960246097, -0.44683893052259993, 0), vec3(0.2568589736578481, -0.5413710659286033, 0), vec3(0.030136021141697004, -0.6734653529888439, 0), vec3(-0.1321163012250642, -0.7679974883948475, 0), vec3(-0.2298979934424358, -0.8249674721466138, 0), vec3(-0.3152158584272439, -0.8746757280756963, 0), vec3(-0.3845088026844707, -0.9150474768041861, 0), vec3(-0.43421573271909814, -0.9440079389541731, 0), vec3(-0.45650038810589094, -0.9569915192799971, 0), vec3(-0.4633814593905352, -0.9610005981821039, 0), vec3(-0.482295976416755, -0.9711830882286059, 0), vec3(-0.518992370629612, -0.9862257076122878, 0), vec3(-0.5561782579407845, -0.9957482817958774, 0), vec3(-0.5934340547946942, -1.0, 0), vec3(-0.6303401776357627, -0.9992300514452821, 0), vec3(-0.6664770429084111, -0.9936876253523497, 0), vec3(-0.7014250670570614, -0.9836219109418274, 0), vec3(-0.7347646665261348, -0.9692820974343417, 0), vec3(-0.7660762577600532, -0.9509173740505183, 0), vec3(-0.7949402572032377, -0.9287769300109829, 0), vec3(-0.82093708130011, -0.9031099545363608, 0), vec3(-0.8436471464950915, -0.8741656368472788, 0), vec3(-0.862650869232604, -0.8421931661643616, 0), vec3(-0.8775286659570688, -0.8074417317082352, 0), vec3(-0.8878609531129074, -0.7701605226995258, 0), vec3(-0.8932281471445415, -0.7305987283588582, 0), vec3(-0.8939187143776635, -0.7090112197071741, 0), vec3(-0.8939187143776635, -0.7009721291695177, 0), vec3(-0.8939187143776635, -0.6853923283701244, 0), vec3(-0.8939187143776635, -0.662791866292562, 0), vec3(-0.8939187143776635, -0.616865040431207, 0), vec3(-0.8939187143776635, -0.5359107486557779, 0), vec3(-0.8939187143776635, -0.4362346934718988, 0), vec3(-0.8939187143776635, -0.3219972667481137, 0), vec3(-0.8939187143776635, -0.1324394122375534, 0), vec3(-0.8939187143776635, 0.13243887005978205, 0), vec3(-0.8939187143776635, 0.3219967245703421, 0), vec3(-0.8939187143776635, 0.43623415129412724, 0), vec3(-0.8939187143776635, 0.5359102064780066, 0), vec3(-0.8939187143776635, 0.6168644982534357, 0), vec3(-0.8939187143776635, 0.6627913241147905, 0), vec3(-0.8939187143776635, 0.6853917861923526, 0), vec3(-0.8939187143776635, 0.700971586991746, 0), vec3(-0.8939187143776635, 0.7090106775294024, 0), vec3(-0.8932281471445415, 0.7305983391009135, 0), vec3(-0.8878609531129074, 0.7701604091865145, 0), vec3(-0.8775286659570688, 0.8074418529916035, 0), vec3(-0.862650869232604, 0.8421934803088427, 0), vec3(-0.8436471464950915, 0.8741661009308942, 0), vec3(-0.82093708130011, 0.90311052465042, 0), vec3(-0.7949402572032377, 0.9287775612600824, 0), vec3(-0.7660762577600532, 0.9509180205525432, 0), vec3(-0.7347646665261348, 0.9692827123204648, 0), vec3(-0.7014250670570614, 0.9836224463565091, 0), vec3(-0.6664770429084111, 0.9936880324533384, 0), vec3(-0.6303401776357627, 0.9992302804036146, 0), vec3(-0.5934340547946942, 1.0, 0), vec3(-0.5561782579407845, 0.9957480010351566, 0), vec3(-0.518992370629612, 0.9862250933017465, 0), vec3(-0.482295976416755, 0.9711820865924317, 0), vec3(-0.8939187143776635, 0.7100399411427142, 0), vec3(-0.8939187143776635, -0.7100404833204859, 0), vec3(-0.46426245908331326, -0.9615138899552849, 0), vec3(-0.46426245908331326, 0.961512674182017, 0), vec3(0.7512574538828581, -0.25332252896216234, 0), vec3(0.7512574538828581, 0.2459262450327322, 0), vec3(0.7512574538828581, 0.25332232358213913, 0));
  const ivec3 triangles2[105] = ivec3[105](ivec3(0, 1, 100), ivec3(0, 84, 85), ivec3(0, 85, 89), ivec3(0, 89, 90), ivec3(0, 90, 91), ivec3(0, 91, 92), ivec3(0, 92, 103), ivec3(0, 100, 84), ivec3(1, 2, 81), ivec3(1, 81, 82), ivec3(1, 82, 83), ivec3(1, 83, 100), ivec3(2, 3, 80), ivec3(2, 80, 81), ivec3(3, 4, 79), ivec3(3, 79, 80), ivec3(4, 5, 78), ivec3(4, 78, 79), ivec3(5, 6, 77), ivec3(5, 77, 78), ivec3(6, 7, 76), ivec3(6, 76, 77), ivec3(7, 8, 75), ivec3(7, 75, 76), ivec3(8, 9, 40), ivec3(8, 40, 41), ivec3(8, 41, 74), ivec3(8, 74, 75), ivec3(9, 10, 39), ivec3(9, 39, 40), ivec3(10, 11, 38), ivec3(10, 38, 39), ivec3(11, 12, 37), ivec3(11, 37, 38), ivec3(12, 13, 105), ivec3(12, 105, 37), ivec3(13, 14, 105), ivec3(14, 15, 17), ivec3(14, 17, 105), ivec3(15, 16, 17), ivec3(15, 106, 16), ivec3(18, 19, 23), ivec3(18, 23, 24), ivec3(18, 24, 105), ivec3(19, 20, 21), ivec3(19, 21, 22), ivec3(19, 22, 23), ivec3(24, 25, 105), ivec3(25, 26, 104), ivec3(25, 104, 105), ivec3(26, 27, 104), ivec3(27, 28, 33), ivec3(27, 33, 104), ivec3(28, 29, 32), ivec3(28, 32, 33), ivec3(29, 30, 32), ivec3(30, 31, 32), ivec3(34, 35, 105), ivec3(34, 105, 104), ivec3(35, 36, 105), ivec3(36, 37, 105), ivec3(41, 42, 74), ivec3(42, 43, 73), ivec3(42, 73, 74), ivec3(43, 44, 72), ivec3(43, 72, 73), ivec3(44, 45, 71), ivec3(44, 71, 72), ivec3(45, 46, 70), ivec3(45, 70, 71), ivec3(46, 47, 69), ivec3(46, 69, 70), ivec3(47, 48, 68), ivec3(47, 68, 69), ivec3(48, 49, 101), ivec3(48, 66, 67), ivec3(48, 67, 68), ivec3(48, 101, 66), ivec3(49, 57, 58), ivec3(49, 58, 59), ivec3(49, 59, 60), ivec3(49, 60, 64), ivec3(49, 64, 65), ivec3(49, 65, 101), ivec3(49, 102, 57), ivec3(50, 51, 55), ivec3(50, 55, 56), ivec3(50, 56, 102), ivec3(51, 52, 54), ivec3(51, 54, 55), ivec3(52, 53, 54), ivec3(56, 57, 102), ivec3(60, 61, 64), ivec3(61, 62, 63), ivec3(61, 63, 64), ivec3(85, 86, 88), ivec3(85, 88, 89), ivec3(86, 87, 88), ivec3(92, 93, 103), ivec3(93, 94, 99), ivec3(93, 99, 103), ivec3(94, 95, 98), ivec3(94, 98, 99), ivec3(95, 96, 97), ivec3(95, 97, 98));

  bool sameSide(vec3 p1, vec3 p2, vec3 a, vec3 b) {
    vec3 cp1 = cross(b-a, p1-a);
    vec3 cp2 = cross(b-a, p2-a);
    return dot(cp1, cp2) >= 0.0;
  }

  bool pointInTriangle(vec3 p, vec3 a, vec3 b, vec3 c) {
    return sameSide(p, a, b, c) && sameSide(p, b, a, c) && sameSide(p, c, a, b);
  }

  bool inPath1(vec2 p) {
    for (int i=0; i<92; i++) {
      ivec3 triangle = triangles1[i];
      vec3 a = positions1[triangle[0]] * scaleFactor;
      vec3 b = positions1[triangle[1]] * scaleFactor;
      vec3 c = positions1[triangle[2]] * scaleFactor;
      if (pointInTriangle(vec3(p, 0.0), a, b, c)) {
        return true;
      }
    }
    return false;
  }

  bool inPath2(vec2 p) {
    for (int i=0; i<105; i++) {
      ivec3 triangle = triangles2[i];
      vec3 a = positions2[triangle[0]] * scaleFactor;
      vec3 b = positions2[triangle[1]] * scaleFactor;
      vec3 c = positions2[triangle[2]] * scaleFactor;
      if (pointInTriangle(vec3(p, 0.0), a, b, c)) {
        return true;
      }
    }
    return false;
  }

  bool inCircle(vec2 p, vec2 center) {
    return length(p - center) < 1. * scaleFactor;
  }

  float smoothUnion(float d1, float d2, float k) {
    float h = max(k - abs(d1 - d2), 0.0);
    return min(d1, d2) - h * h * 0.25 / k;
  }

  float shapeDistance(vec2 p) {
    float d1 = inPath1(p + vec2(distance, 0.0)) ? 0.0 : 1.0;
    float d2 = inCircle(p, vec2(0.0, 0.0)) ? 0.0 : 1.0;
    float d3 = inPath2(p + vec2(-1. * distance, 0.0)) ? 0.0 : 1.0;
    float k = 0.3; // Increased smoothing factor for more blur
    float d = smoothUnion(d1, d2, k);
    d = smoothUnion(d, d3, k);
    return d;
  }

  vec4 getShapeColor(vec2 p) {
    if (inPath1(p + vec2(distance, 0.0))) {
      return vec4(0.184, 0.918, 0.620, 1.0); // #2FEA9E
    }
    if (inCircle(p, vec2(0.0, 0.0))) {
      return vec4(0.51, 0.314, 1.0, 1.0); // #8250FF
    }
    if (inPath2(p + vec2(-1. * distance, 0.0))) {
      return vec4(1.0, 0.553, 0.765, 1.0); // #FF8DC3
    }
    return vec4(0.0, 0.0, 0.0, 0.0);
  }

  void main() {
    vec2 fragCoord = gl_FragCoord.xy;
    vec4 fragColor = vec4(0.0, 0.0, 0.0, 0.0);
    
    vec2 uv = vUv;
    uv = uv * 2.0 - 1.0;
    uv.x *= iResolution.x/iResolution.y;
    
    // Scale and position the shapes
    float scale = 0.3;
    vec2 p = uv / scale;
    
    // Calculate distance to the nearest shape
    float d = shapeDistance(p);
    
    // Apply fog effect based on distance
    float fog = exp(-d * 5.0); // Increased fog effect for more blur
    vec4 shapeColor = getShapeColor(p);
    fragColor = mix(vec4(0.0, 0.0, 0.0, 1.0), shapeColor, fog);
    
    gl_FragColor = fragColor;
  }
`;